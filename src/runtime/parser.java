
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 01 16:35:58 BRST 2010
//----------------------------------------------------

package runtime;

import java_cup.runtime.*;
import kernel.*;
import io.*;
import ast.*;
import ast.Boolean;
import java.util.*;
import util.*;
import cup.*;
import kernel.semantico.*;
import gen.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 01 16:35:58 BRST 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\015\000\002\002" +
    "\014\000\002\016\005\000\002\053\004\000\002\053\002" +
    "\000\002\003\007\000\002\003\002\000\002\017\005\000" +
    "\002\017\003\000\002\020\005\000\002\020\003\000\002" +
    "\021\005\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\004" +
    "\000\002\063\003\000\002\063\003\000\002\063\002\000" +
    "\002\025\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\045\003\000\002\045\002\000\002\056" +
    "\005\000\002\056\003\000\002\026\004\000\002\027\005" +
    "\000\002\004\007\000\002\004\003\000\002\005\005\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\006\000\002\062\003\000\002\062" +
    "\002\000\002\010\006\000\002\046\003\000\002\046\002" +
    "\000\002\011\006\000\002\011\005\000\002\047\004\000" +
    "\002\047\002\000\002\012\007\000\002\041\005\000\002" +
    "\050\003\000\002\050\002\000\002\051\005\000\002\051" +
    "\003\000\002\014\006\000\002\052\003\000\002\052\002" +
    "\000\002\015\005\000\002\015\003\000\002\054\003\000" +
    "\002\054\002\000\002\055\005\000\002\055\002\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\042\003" +
    "\000\002\042\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\006\000\002\031" +
    "\005\000\002\057\003\000\002\057\002\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\005\000\002\034\013\000\002" +
    "\060\011\000\002\060\002\000\002\061\006\000\002\061" +
    "\002\000\002\035\011\000\002\035\010\000\002\036\006" +
    "\000\002\036\003\000\002\036\006\000\002\036\006\000" +
    "\002\064\002\000\002\065\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\051\004\001\002\000\004\013\uff9d\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\004\015\011\001\002\000" +
    "\012\052\ufffc\054\012\055\ufffc\060\ufffc\001\002\000\012" +
    "\013\ufffa\052\ufffa\055\ufffa\060\ufffa\001\002\000\004\052" +
    "\255\001\002\000\010\052\uffc4\055\015\060\uffc4\001\002" +
    "\000\010\013\uffe0\052\uffe0\060\uffe0\001\002\000\010\013" +
    "\225\052\uffc5\060\uffc5\001\002\000\006\052\uffc2\060\uffc2" +
    "\001\002\000\006\052\ufffe\060\021\001\002\000\006\013" +
    "\213\020\215\001\002\000\004\015\212\001\002\000\004" +
    "\015\024\001\002\000\014\015\uffd5\052\ufffc\054\012\055" +
    "\ufffc\060\ufffc\001\002\000\004\015\uff9c\001\002\000\004" +
    "\015\uffd6\001\002\000\004\052\030\001\002\000\020\013" +
    "\043\024\041\031\032\032\uff9d\062\045\063\037\064\031" +
    "\001\002\000\004\020\206\001\002\000\022\004\uff9d\005" +
    "\uff9d\006\uff9d\013\uff9d\020\uff9d\034\uff9d\035\uff9d\037\uff9d" +
    "\001\002\000\014\015\uffab\025\uffab\027\uffab\033\uffab\053" +
    "\uffab\001\002\000\014\015\uffae\025\uffae\027\uffae\033\uffae" +
    "\053\uffae\001\002\000\014\015\uffad\025\uffad\027\uffad\033" +
    "\uffad\053\uffad\001\002\000\004\022\176\001\002\000\016" +
    "\015\uffa0\020\173\025\uffa0\027\uffa0\033\uffa0\053\uffa0\001" +
    "\002\000\014\015\uffaa\025\uffaa\027\uffaa\033\uffaa\053\uffaa" +
    "\001\002\000\022\004\uff9d\005\uff9d\006\uff9d\013\uff9d\020" +
    "\uff9d\034\uff9d\035\uff9d\037\uff9d\001\002\000\006\015\145" +
    "\053\146\001\002\000\072\011\127\012\uffb3\014\131\015" +
    "\uffb3\016\uffb3\017\uffb3\020\130\021\uffb3\022\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\053\uffb3\056\uffb3\001\002\000" +
    "\012\015\uffc6\025\uffc6\027\uffc6\053\uffc6\001\002\000\004" +
    "\020\124\001\002\000\004\032\050\001\002\000\014\015" +
    "\uffac\025\uffac\027\uffac\033\uffac\053\uffac\001\002\000\020" +
    "\013\043\024\041\031\032\032\uff9d\062\045\063\037\064" +
    "\031\001\002\000\004\033\052\001\002\000\022\004\uffec" +
    "\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035\054\037" +
    "\065\001\002\000\022\004\uffbb\005\uffbb\006\uffbb\013\uffbb" +
    "\020\uffbb\034\uffbb\035\uffbb\037\uffbb\001\002\000\022\004" +
    "\uffba\005\uffba\006\uffba\013\uffba\020\uffba\034\uffba\035\uffba" +
    "\037\uffba\001\002\000\062\012\ufff2\015\ufff2\016\105\017" +
    "\ufff2\021\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\040\107\041\104\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\053\ufff2" +
    "\056\ufff2\001\002\000\014\004\112\005\115\006\120\013" +
    "\043\020\117\001\002\000\034\012\ufff6\015\ufff6\017\ufff6" +
    "\021\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\033\ufff6\047" +
    "\ufff6\050\ufff6\053\ufff6\056\ufff6\001\002\000\014\004\uffee" +
    "\005\uffee\006\uffee\013\uffee\020\uffee\001\002\000\034\012" +
    "\ufff8\015\ufff8\017\ufff8\021\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\033\ufff8\047\071\050\ufff8\053\ufff8\056\ufff8\001" +
    "\002\000\054\012\ufff4\015\ufff4\017\ufff4\021\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\033\ufff4\034\053\035\054\036" +
    "\101\042\075\043\074\044\073\045\076\046\102\047\ufff4" +
    "\050\ufff4\053\ufff4\056\ufff4\001\002\000\016\015\uff9c\025" +
    "\uff9c\027\uff9c\033\uff9c\050\067\053\uff9c\001\002\000\062" +
    "\012\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\053\ufff0\056\ufff0\001\002\000\014" +
    "\004\uffed\005\uffed\006\uffed\013\uffed\020\uffed\001\002\000" +
    "\014\015\uffa2\025\uffa2\027\uffa2\033\uffa2\053\uffa2\001\002" +
    "\000\022\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034" +
    "\053\035\054\037\065\001\002\000\034\012\ufff9\015\ufff9" +
    "\017\ufff9\021\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\033" +
    "\ufff9\047\071\050\ufff9\053\ufff9\056\ufff9\001\002\000\022" +
    "\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035" +
    "\054\037\065\001\002\000\034\012\ufff7\015\ufff7\017\ufff7" +
    "\021\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\033\ufff7\047" +
    "\ufff7\050\ufff7\053\ufff7\056\ufff7\001\002\000\022\004\uffbe" +
    "\005\uffbe\006\uffbe\013\uffbe\020\uffbe\034\uffbe\035\uffbe\037" +
    "\uffbe\001\002\000\022\004\uffc1\005\uffc1\006\uffc1\013\uffc1" +
    "\020\uffc1\034\uffc1\035\uffc1\037\uffc1\001\002\000\022\004" +
    "\uffc0\005\uffc0\006\uffc0\013\uffc0\020\uffc0\034\uffc0\035\uffc0" +
    "\037\uffc0\001\002\000\022\004\uffbf\005\uffbf\006\uffbf\013" +
    "\uffbf\020\uffbf\034\uffbf\035\uffbf\037\uffbf\001\002\000\022" +
    "\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035" +
    "\054\037\065\001\002\000\022\004\uffec\005\uffec\006\uffec" +
    "\013\uffec\020\uffec\034\053\035\054\037\065\001\002\000" +
    "\022\004\uffbd\005\uffbd\006\uffbd\013\uffbd\020\uffbd\034\uffbd" +
    "\035\uffbd\037\uffbd\001\002\000\022\004\uffbc\005\uffbc\006" +
    "\uffbc\013\uffbc\020\uffbc\034\uffbc\035\uffbc\037\uffbc\001\002" +
    "\000\062\012\ufff3\015\ufff3\016\105\017\ufff3\021\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\040\107\041\104\042\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\050\ufff3\053\ufff3\056\ufff3\001\002" +
    "\000\022\004\uffb8\005\uffb8\006\uffb8\013\uffb8\020\uffb8\034" +
    "\uffb8\035\uffb8\037\uffb8\001\002\000\022\004\uffb9\005\uffb9" +
    "\006\uffb9\013\uffb9\020\uffb9\034\uffb9\035\uffb9\037\uffb9\001" +
    "\002\000\022\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec" +
    "\034\053\035\054\037\065\001\002\000\022\004\uffb7\005" +
    "\uffb7\006\uffb7\013\uffb7\020\uffb7\034\uffb7\035\uffb7\037\uffb7" +
    "\001\002\000\062\012\ufff1\015\ufff1\016\ufff1\017\ufff1\021" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\053\ufff1\056\ufff1" +
    "\001\002\000\040\012\ufff5\015\ufff5\017\ufff5\021\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\033\ufff5\034\053\035\054" +
    "\047\ufff5\050\ufff5\053\ufff5\056\ufff5\001\002\000\062\012" +
    "\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\053\uffb4\056\uffb4\001\002\000\062\012" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\053\uffe8\056\uffe8\001\002\000\062\012" +
    "\uffef\015\uffef\016\uffef\017\uffef\021\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\033\uffef\034\uffef\035\uffef\036\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\053\uffef\056\uffef\001\002\000\062\012" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\021\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\053\uffb6\056\uffb6\001\002\000\062\012" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\053\uffe9\056\uffe9\001\002\000\022\004" +
    "\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035\054" +
    "\037\065\001\002\000\062\012\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\021\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\053\uffb5" +
    "\056\uffb5\001\002\000\062\012\uffea\015\uffea\016\uffea\017" +
    "\uffea\021\uffea\025\uffea\026\uffea\027\uffea\030\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\053\uffea" +
    "\056\uffea\001\002\000\006\021\123\050\067\001\002\000" +
    "\062\012\uffeb\015\uffeb\016\uffeb\017\uffeb\021\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\053\uffeb\056\uffeb\001\002\000" +
    "\022\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053" +
    "\035\054\037\065\001\002\000\006\021\126\050\067\001" +
    "\002\000\014\015\uffa1\025\uffa1\027\uffa1\033\uffa1\053\uffa1" +
    "\001\002\000\024\004\uffec\005\uffec\006\uffec\012\uffaf\013" +
    "\uffec\020\uffec\034\053\035\054\037\065\001\002\000\024" +
    "\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec\021\uffe6\034" +
    "\053\035\054\037\065\001\002\000\004\061\133\001\002" +
    "\000\062\012\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\053\uffe3\056\uffe3\001\002" +
    "\000\064\012\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1\022" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\053\uffb1\056\uffb1" +
    "\001\002\000\004\021\141\001\002\000\010\017\uffe4\021" +
    "\uffe4\050\067\001\002\000\006\017\137\021\uffe7\001\002" +
    "\000\022\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034" +
    "\053\035\054\037\065\001\002\000\010\017\uffe5\021\uffe5" +
    "\050\067\001\002\000\062\012\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\021\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2" +
    "\056\uffe2\001\002\000\006\012\uffb0\050\067\001\002\000" +
    "\004\012\144\001\002\000\064\012\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\021\uffb2\022\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\053\uffb2\056\uffb2\001\002\000\020\013\043\024\041" +
    "\031\032\032\uff9d\062\045\063\037\064\031\001\002\000" +
    "\004\013\147\001\002\000\004\015\uffd0\001\002\000\012" +
    "\015\uffc7\025\uffc7\027\uffc7\053\uffc7\001\002\000\022\004" +
    "\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035\054" +
    "\037\065\001\002\000\006\026\153\050\067\001\002\000" +
    "\020\013\043\024\041\031\032\032\uff9d\062\045\063\037" +
    "\064\031\001\002\000\012\015\145\025\uffa6\027\uffa6\053" +
    "\uffa6\001\002\000\010\025\156\027\uff9d\053\uffa4\001\002" +
    "\000\020\013\uff9d\024\uff9d\031\uff9d\032\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\001\002\000\004\027\163\001\002\000\004" +
    "\053\uff9c\001\002\000\004\053\162\001\002\000\014\015" +
    "\uffa8\025\uffa8\027\uffa8\033\uffa8\053\uffa8\001\002\000\022" +
    "\004\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035" +
    "\054\037\065\001\002\000\006\026\165\050\067\001\002" +
    "\000\020\013\043\024\041\031\032\032\uff9d\062\045\063" +
    "\037\064\031\001\002\000\012\015\145\025\uff9c\027\uff9c" +
    "\053\uff9c\001\002\000\010\025\uffa7\027\uffa7\053\uffa7\001" +
    "\002\000\020\013\043\024\041\031\032\032\uff9d\062\045" +
    "\063\037\064\031\001\002\000\006\015\145\053\uff9c\001" +
    "\002\000\004\053\uffa5\001\002\000\022\004\uffec\005\uffec" +
    "\006\uffec\013\uffec\020\uffec\034\053\035\054\037\065\001" +
    "\002\000\006\021\175\050\067\001\002\000\014\015\uff9f" +
    "\025\uff9f\027\uff9f\033\uff9f\053\uff9f\001\002\000\022\004" +
    "\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035\054" +
    "\037\065\001\002\000\016\015\uffa9\025\uffa9\027\uffa9\033" +
    "\uffa9\050\067\053\uffa9\001\002\000\022\004\uffec\005\uffec" +
    "\006\uffec\013\uffec\020\uffec\034\053\035\054\037\065\001" +
    "\002\000\006\030\202\050\067\001\002\000\020\013\043" +
    "\024\041\031\032\032\uff9d\062\045\063\037\064\031\001" +
    "\002\000\006\015\145\053\uff9c\001\002\000\004\053\205" +
    "\001\002\000\014\015\uffa3\025\uffa3\027\uffa3\033\uffa3\053" +
    "\uffa3\001\002\000\022\004\uffec\005\uffec\006\uffec\013\uffec" +
    "\020\uffec\034\053\035\054\037\065\001\002\000\006\021" +
    "\210\050\067\001\002\000\014\015\uff9e\025\uff9e\027\uff9e" +
    "\033\uff9e\053\uff9e\001\002\000\004\015\uffd7\001\002\000" +
    "\006\052\uffc3\060\uffc3\001\002\000\004\020\215\001\002" +
    "\000\006\015\uffd1\023\245\001\002\000\010\013\uffc8\021" +
    "\uffcd\055\216\001\002\000\004\013\uffc9\001\002\000\004" +
    "\021\243\001\002\000\004\013\225\001\002\000\006\015" +
    "\223\021\uffce\001\002\000\006\015\uffcb\021\uffcb\001\002" +
    "\000\006\013\uffc8\055\216\001\002\000\006\015\uffcc\021" +
    "\uffcc\001\002\000\006\017\uffde\023\uffde\001\002\000\006" +
    "\017\230\023\227\001\002\000\010\007\235\010\232\057" +
    "\236\001\002\000\004\013\231\001\002\000\006\017\uffdf" +
    "\023\uffdf\001\002\000\006\015\uffdc\021\uffdc\001\002\000" +
    "\006\015\uffdb\021\uffdb\001\002\000\006\015\uffca\021\uffca" +
    "\001\002\000\006\015\uffdd\021\uffdd\001\002\000\024\004" +
    "\uffec\005\uffec\006\uffec\013\uffec\020\uffec\034\053\035\054" +
    "\037\065\056\uffd8\001\002\000\004\056\241\001\002\000" +
    "\006\050\067\056\uffd9\001\002\000\010\007\235\010\232" +
    "\057\236\001\002\000\006\015\uffda\021\uffda\001\002\000" +
    "\006\015\uffcf\023\uffcf\001\002\000\004\015\uffd3\001\002" +
    "\000\010\007\235\010\232\057\236\001\002\000\004\015" +
    "\uffd2\001\002\000\006\015\uffd1\023\245\001\002\000\004" +
    "\015\uffd4\001\002\000\006\017\230\023\252\001\002\000" +
    "\010\007\235\010\232\057\236\001\002\000\004\015\254" +
    "\001\002\000\010\013\uffe1\052\uffe1\060\uffe1\001\002\000" +
    "\020\013\043\024\041\031\032\032\uff9d\062\045\063\037" +
    "\064\031\001\002\000\006\015\145\053\257\001\002\000" +
    "\004\013\260\001\002\000\006\002\uff9c\014\uff9c\001\002" +
    "\000\006\002\uffff\014\262\001\002\000\004\002\000\001" +
    "\002\000\012\013\264\052\ufffd\055\ufffd\060\ufffd\001\002" +
    "\000\004\036\265\001\002\000\022\004\uffec\005\uffec\006" +
    "\uffec\013\uffec\020\uffec\034\053\035\054\037\065\001\002" +
    "\000\006\015\267\050\067\001\002\000\012\013\ufffb\052" +
    "\ufffb\055\ufffb\060\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\002\004\001\001\000\004\064\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\012\053\013\001\001\000" +
    "\004\003\262\001\001\000\002\001\001\000\006\004\015" +
    "\054\016\001\001\000\002\001\001\000\004\005\250\001" +
    "\001\000\004\055\017\001\001\000\006\010\021\011\022" +
    "\001\001\000\004\041\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\025\016\026\046\024\053\013" +
    "\001\001\000\004\065\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\041\026\032\031\035\032\043" +
    "\033\033\034\034\035\046\036\037\064\045\001\001\000" +
    "\002\001\001\000\004\064\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\150\001\001" +
    "\000\002\001\001\000\004\027\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\032\031\035\032\050\033\033\034\034\035" +
    "\046\036\037\064\045\001\001\000\002\001\001\000\022" +
    "\017\062\020\060\021\056\022\061\023\054\024\063\042" +
    "\057\063\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\105\001\001\000\012\025\113\026\112\030" +
    "\120\031\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\077\044\076\001\001\000" +
    "\004\065\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\067\021\056\022\061\023" +
    "\054\024\063\042\057\063\055\001\001\000\002\001\001" +
    "\000\016\021\071\022\061\023\054\024\063\042\057\063" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\110\023\054\024\063\042\057\063\055\001\001\000\012" +
    "\023\102\024\063\042\057\063\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\107\042\057\063" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\017\121\020\060\021\056\022\061\023\054\024\063\042" +
    "\057\063\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\017\124\020" +
    "\060\021\056\022\061\023\054\024\063\042\057\063\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\141\020\060\021\056\022\061\023\054\024\063\042\057" +
    "\057\142\063\055\001\001\000\026\017\134\020\060\021" +
    "\056\022\061\023\054\024\063\042\057\045\133\056\135" +
    "\063\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\137\020\060\021\056\022\061\023" +
    "\054\024\063\042\057\063\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\026\032\031\035\032\147\033\033" +
    "\034\034\035\046\036\037\064\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\017\151" +
    "\020\060\021\056\022\061\023\054\024\063\042\057\063" +
    "\055\001\001\000\002\001\001\000\024\015\153\026\032" +
    "\031\035\032\043\033\033\034\034\035\046\036\037\064" +
    "\045\001\001\000\004\060\154\001\001\000\006\061\157" +
    "\064\156\001\001\000\004\064\167\001\001\000\002\001" +
    "\001\000\004\065\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\163\020\060\021\056\022\061\023" +
    "\054\024\063\042\057\063\055\001\001\000\002\001\001" +
    "\000\024\015\165\026\032\031\035\032\043\033\033\034" +
    "\034\035\046\036\037\064\045\001\001\000\004\065\166" +
    "\001\001\000\002\001\001\000\024\015\170\026\032\031" +
    "\035\032\043\033\033\034\034\035\046\036\037\064\045" +
    "\001\001\000\004\065\171\001\001\000\002\001\001\000" +
    "\022\017\173\020\060\021\056\022\061\023\054\024\063" +
    "\042\057\063\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\017\176\020\060\021\056\022\061\023\054" +
    "\024\063\042\057\063\055\001\001\000\002\001\001\000" +
    "\022\017\200\020\060\021\056\022\061\023\054\024\063" +
    "\042\057\063\055\001\001\000\002\001\001\000\024\015" +
    "\202\026\032\031\035\032\043\033\033\034\034\035\046" +
    "\036\037\064\045\001\001\000\004\065\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\206\020\060" +
    "\021\056\022\061\023\054\024\063\042\057\063\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\246\001\001\000\004\047" +
    "\243\001\001\000\012\014\221\050\216\051\220\052\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\223\052\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\233\007\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\017\237\020\060\021\056\022\061\023\054\024\063\042" +
    "\057\062\236\063\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\241\007\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\245" +
    "\007\232\001\001\000\002\001\001\000\004\047\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\252" +
    "\007\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\255\026\032\031\035\032\043\033\033\034\034" +
    "\035\046\036\037\064\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\265\020\060\021\056\022\061\023\054\024\063" +
    "\042\057\063\055\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexico.nextCupToken(); 
    }

 
  AnalisadorLexico lexico;
  public Node raiz;
  public static EscritorArquivo escritor;


  public parser(AnalisadorLexico l, EscritorArquivo e) {
    this();
    lexico=l;
    escritor =e;
    WriterHelper.setEscritor(e);
    symbolFactory = LogSymbolFactory.getInstance();
  }


  public void syntax_error(java_cup.runtime.Symbol current) {
    imprimeErro("Erro de Sintaxe (" + current.sym + ")", current);
  }
  public void imprimeErro(String message, java_cup.runtime.Symbol info) {
    lexico.imprimeErro(message, info);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // deleta_escopo ::= 
            {
              Object RESULT =null;
		 
					Escopos.getInstance().removeEscopo(); 
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deleta_escopo",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cria_escopo ::= 
            {
              Object RESULT =null;
		 
					Escopos.getInstance().createEscopo(((LogSymbolFactory)parser.getSymbolFactory()).getNomeAnteriorSymbol()); 
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cria_escopo",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // io_statement ::= READ OPAR expression CPAR 
            {
              IoStatement RESULT =null;
		int e2168left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2168right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2168 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Validator.validaIntegerExpression(e2168); RESULT = new IoStatement(e2168, IoType.READ);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // io_statement ::= WRITELN OPAR expression CPAR 
            {
              IoStatement RESULT =null;
		int e1168left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1168right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1168 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new IoStatement(e1168, IoType.WRITELN_PARAMETO);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // io_statement ::= WRITELN 
            {
              IoStatement RESULT =null;
		RESULT = new IoStatement(null, IoType.WRITE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // io_statement ::= WRITE OPAR expression CPAR 
            {
              IoStatement RESULT =null;
		int e168left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e168right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e168 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Validator.validaIntegerExpression(e168);RESULT = new IoStatement(e168, IoType.WRITE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // repetion ::= cria_escopo REPEAT statement UNTIL expression deleta_escopo 
            {
              Repetition RESULT =null;
		int s1166left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1166right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statement s1166 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1166left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1166right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e1166 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ArrayList<Statement> lista = new ArrayList<Statement>(); lista.add(s1166); RESULT = new Repetition(e1166,lista,RepetitionType.REPEAT); SourceGenerator.getInstance().resetarCache();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // repetion ::= WHILE cria_escopo expression DO statements deleta_escopo END 
            {
              Repetition RESULT =null;
		int e166left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e166right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e166 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s166left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s166right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Statement> s166 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Repetition(e166,s166,RepetitionType.WHILE); SourceGenerator.getInstance().resetarCache();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // conditional_opt ::= 
            {
              Else RESULT =null;
		 RESULT = new Else(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_opt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // conditional_opt ::= ELSE cria_escopo statements deleta_escopo 
            {
              Else RESULT =null;
		int s164left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s164right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> s164 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else(s164); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_opt",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // conditional_list ::= 
            {
              ArrayList<Elsif> RESULT =null;
		 RESULT = new ArrayList<Elsif>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_list",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // conditional_list ::= conditional_list cria_escopo ELSIF expression THEN statements deleta_escopo 
            {
              ArrayList<Elsif> RESULT =null;
		int lista162left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lista162right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<Elsif> lista162 = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e119left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e119right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e119 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s119left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s119right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> s119 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		lista162.add(new Elsif(e119,s119)); RESULT = lista162;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_list",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // conditional ::= IF cria_escopo expression THEN statements conditional_list conditional_opt deleta_escopo END 
            {
              Conditional RESULT =null;
		int e160left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e160right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e160 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s160left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s160right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Statement> s160 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cl160left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cl160right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Elsif> cl160 = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int co160left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int co160right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Else co160 = (Else)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Conditional(e160,s160,cl160,co160);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assignment ::= variable ATRIB expression 
            {
              Assignment RESULT =null;
		int v117left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v117right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression v117 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e117left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e117right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e117 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TabelaSimbolo.modificaInfo(((Variable)v117).getId(), e117); RESULT =  new Assignment((Variable)v117, e117); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= io_statement 
            {
              Statement RESULT =null;
		int i116left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i116right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IoStatement i116 = (IoStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =i116;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= proccall 
            {
              Statement RESULT =null;
		int p116left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p116right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcCall p116 = (ProcCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p116;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= repetion 
            {
              Statement RESULT =null;
		int r116left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r116right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Repetition r116 = (Repetition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r116; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= conditional 
            {
              Statement RESULT =null;
		int c116left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c116right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Conditional c116 = (Conditional)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =c116; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= assignment 
            {
              Statement RESULT =null;
		int a116left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a116right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a116 = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a116; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_opt ::= 
            {
              Expression RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_opt ::= expression 
            {
              Expression RESULT =null;
		int e154left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e154right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e154 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e154; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_opt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variable ::= ID PONTO SIZE 
            {
              Expression RESULT =null;
		int id1152left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1152right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id1152 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	Validator.validaVetor(id1152);
	RESULT = new ValorLiteral(1);
	SourceGenerator.getInstance().resetarCache();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable ::= ID OCOL expression_opt CCOL 
            {
              Expression RESULT =null;
		int id1152left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1152right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id1152 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Validator.validaIntegerExpression(e); RESULT = new ArrayVariable(id1152,e ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable ::= ID 
            {
              Expression RESULT =null;
		int id152left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id152right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id152 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(id152); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= NUM 
            {
              ValorLiteral RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ValorLiteral(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= FALSE 
            {
              ValorLiteral RESULT =null;
		RESULT = new ValorLiteral(Boolean.FALSE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= TRUE 
            {
              ValorLiteral RESULT =null;
		RESULT = new ValorLiteral(Boolean.TRUE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MULTOP ::= DIV 
            {
              Operador RESULT =null;
		RESULT = Operador.DIV;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MULTOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MULTOP ::= MOD 
            {
              Operador RESULT =null;
		RESULT = Operador.MOD;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MULTOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MULTOP ::= MULT 
            {
              Operador RESULT =null;
		RESULT =Operador.MULT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MULTOP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ADDOP ::= MENOS 
            {
              Operador RESULT =null;
		 RESULT = Operador.MENOS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ADDOP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ADDOP ::= MAIS 
            {
              Operador RESULT =null;
		RESULT = Operador.MAIS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ADDOP",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RELOP ::= DIFERENTE 
            {
              Operador RESULT =null;
		RESULT = Operador.DIFERENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RELOP ::= IGUAL 
            {
              Operador RESULT =null;
		RESULT = Operador.IGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RELOP ::= MENORIGUAL 
            {
              Operador RESULT =null;
		RESULT = Operador.MENORIGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RELOP ::= MAIORIGUAL 
            {
              Operador RESULT =null;
		RESULT = Operador.MAIORIGUAL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RELOP ::= MENOR 
            {
              Operador RESULT =null;
		RESULT = Operador.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELOP ::= MAIOR 
            {
              Operador RESULT =null;
		RESULT = Operador.MAIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELOP",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procdecl_list ::= 
            {
              ArrayList<ProcDecl> RESULT =null;
		 RESULT = new ArrayList<ProcDecl>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procdecl_list",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procdecl_list ::= procdecl_list procdecl PTVIRGULA 
            {
              ArrayList<ProcDecl> RESULT =null;
		int lista142left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista142right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ProcDecl> lista142 = (ArrayList<ProcDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p142left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p142right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcDecl p142 = (ProcDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 lista142.add(p142); RESULT=lista142; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procdecl_list",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // vardecl_opt ::= 
            {
              ArrayList<VarDecl> RESULT =null;
		RESULT=new ArrayList<VarDecl>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // vardecl_opt ::= vardecl 
            {
              ArrayList<VarDecl> RESULT =null;
		int v140left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v140right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDecl> v140 = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v140; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statements ::= statement 
            {
              ArrayList<Statement> RESULT =null;
		int s2107left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2107right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s2107 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Statement> lista138 = new ArrayList<Statement>(); lista138.add(s2107); RESULT = lista138;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statements ::= statements PTVIRGULA statement 
            {
              ArrayList<Statement> RESULT =null;
		int lista138left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista138right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Statement> lista138 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s107left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s107right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s107 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lista138.add(s107); RESULT=lista138;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_opt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_opt ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_opt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fpsection ::= var_opt idlist DOISPONTOS vartype 
            {
              FpSection RESULT =null;
		int id134left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id134right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> id134 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v134left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v134right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarType v134 = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
 
	RESULT = new FpSection(id134, v134);
	 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpsection",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fpsection_list ::= fpsection 
            {
              ArrayList<FpSection> RESULT =null;
		int fp132left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp132right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FpSection fp132 = (FpSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<FpSection> lista132 = new ArrayList<FpSection>(); lista132.add(fp132); RESULT=lista132; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpsection_list",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fpsection_list ::= fpsection_list PTVIRGULA fpsection 
            {
              ArrayList<FpSection> RESULT =null;
		int lista132left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista132right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<FpSection> lista132 = (ArrayList<FpSection>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fp2132left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp2132right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FpSection fp2132 = (FpSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista132.add(fp2132); RESULT = lista132;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpsection_list",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fpsection_opt ::= 
            {
              ArrayList<FpSection> RESULT =null;
		 RESULT = new ArrayList<FpSection>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpsection_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fpsection_opt ::= fpsection_list 
            {
              ArrayList<FpSection> RESULT =null;
		int f163left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f163right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FpSection> f163 = (ArrayList<FpSection>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=f163; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fpsection_opt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // formalpars ::= OPAR fpsection_opt CPAR 
            {
              FormalPars RESULT =null;
		int f128left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f128right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<FpSection> f128 = (ArrayList<FpSection>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FormalPars(f128); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalpars",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // procbody ::= declarations BEGIN statements END ID 
            {
              ProcBody RESULT =null;
		int d126left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d126right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Declarations d126 = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s126left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s126right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Statement> s126 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id126left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id126right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id126 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcBody(d126,s126,id126); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procbody",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // vartype_opt ::= 
            {
              VarType RESULT =null;
		 RESULT = new VarType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // vartype_opt ::= DOISPONTOS vartype 
            {
              VarType RESULT =null;
		int v25left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v25right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarType v25 = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v25; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procheader ::= PROCEDURE formalpars vartype_opt 
            {
              ProcHeader RESULT =null;
		int fp24left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fp24right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalPars fp24 = (FormalPars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v24left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v24right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarType v24 = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new ProcHeader("",fp24,v24);
				System.err.println("Faltou identificador da funcao antes do parenteses. \n Linha: "+parser.lexico.getLeitor().getContLinha());
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procheader",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procheader ::= PROCEDURE ID formalpars vartype_opt 
            {
              ProcHeader RESULT =null;
		int id24left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id24right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id24 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fp24left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fp24right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalPars fp24 = (FormalPars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v24left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v24right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarType v24 = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				
				FunInfo funInfo = new FunInfo(id24, null, v24.getLiteral());
				TabelaSimbolo.insereInfo(funInfo);
				Escopos.getInstance().createEscopo(id24);
				List <Integer> fps = new ArrayList<Integer>();
				for(FpSection fpSection: fp24.getFpSections()){
			
					for(String id:fpSection.getIdList()){
						int pos = TabelaSimbolo.insereInfo(new ParamInfo(id, fpSection.getVarType().getLiteral() ));
						fps.add(pos);
					}
			
				}
				funInfo.setFpar(fps);
				
				//inserindo um return como VarInfo
				if(v24.getLiteral()!=null)
					TabelaSimbolo.insereInfo(new VarInfo("RESULT",v24.getLiteral(), null));

				RESULT = new ProcHeader(id24,fp24,v24);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procheader",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procbody_opt ::= 
            {
              ProcBody RESULT =null;
		 RESULT = new ProcBody(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procbody_opt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procbody_opt ::= procbody 
            {
              ProcBody RESULT =null;
		int p23left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p23right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcBody p23 = (ProcBody)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  p23; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procbody_opt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procdecl ::= procheader PTVIRGULA procbody_opt deleta_escopo 
            {
              ProcDecl RESULT =null;
		int ph22left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ph22right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ProcHeader ph22 = (ProcHeader)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pb22left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pb22right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcBody pb22 = (ProcBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new ProcDecl(ph22,pb22); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procdecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_opt2 ::= 
            {
              Expression RESULT =null;
		 RESULT = new NullableExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opt2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_opt2 ::= expression 
            {
              Expression RESULT =null;
		int e21left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e21right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e21 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e21;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opt2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arraytype ::= ARRAY exp_opt2 OF vartype 
            {
              ArrayVarType RESULT =null;
		int e114left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e114right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e114 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v114left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v114right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarType v114 = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Validator.validaIntegerExpression(e114);


	if(v114.getLiteral() == Literal.INTEGER){
		RESULT = new ArrayVarType(Literal.ARRAY_TYPE_OF_INTEGER,e114);
	}
	else if(v114.getLiteral() == Literal.BOOLEAN){
		RESULT = new ArrayVarType(Literal.ARRAY_TYPE_OF_BOOLEAN,e114);
	}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraytype",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vartype ::= arraytype 
            {
              VarType RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayVarType a = (ArrayVarType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vartype ::= INTEGER 
            {
              VarType RESULT =null;
		 RESULT = new VarType(Literal.INTEGER);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vartype ::= BOOLEAN 
            {
              VarType RESULT =null;
		 RESULT = new VarType(Literal.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vartype",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // idlist ::= ID 
            {
              ArrayList<String> RESULT =null;
		int id108left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id108right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id108 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				ArrayList<String> lista110 = new ArrayList<String>(); lista110.add(id108); RESULT=lista110; 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // idlist ::= idlist VIRGULA ID 
            {
              ArrayList<String> RESULT =null;
		int lista110left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista110right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> lista110 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1108left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1108right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id1108 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 	lista110.add(id1108); RESULT = lista110;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idlist",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardecl ::= VAR 
            {
              ArrayList<VarDecl> RESULT =null;
		 RESULT = new ArrayList<VarDecl>();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardecl ::= vardecl idlist DOISPONTOS vartype PTVIRGULA 
            {
              ArrayList<VarDecl> RESULT =null;
		int lista108left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lista108right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDecl> lista108 = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id108left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id108right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> id108 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v108left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v108right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarType v108 = (VarType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

		for(String id : id108){
			TabelaSimbolo.insereInfo(new VarInfo(id, v108.getLiteral(), null )); 
		}
		lista108.add(new VarDecl(id108,v108)); RESULT =lista108 ;
 	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // actualpar ::= OPAR exp_opt CPAR 
            {
              ActualPar RESULT =null;
		int e16left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e16right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expression> e16 = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ActualPar(e16); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualpar",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // proccall ::= ID actualpar 
            {
              ProcCall RESULT =null;
		int id15left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id15right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String id15 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ac15left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ac15right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActualPar ac15 = (ActualPar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT= new ProcCall(id15,ac15);
	
	TabelaSimbolo.insereInfo(new FunCallInfo(id15, ac15));
	
	
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proccall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_list ::= expression 
            {
              ArrayList<Expression> RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e15 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expression> lista14 = new ArrayList<Expression>(); lista14.add(e15); RESULT=lista14;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_list ::= exp_list VIRGULA expression 
            {
              ArrayList<Expression> RESULT =null;
		int lista14left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista14right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expression> lista14 = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e14left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e14right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e14 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lista14.add(e14); RESULT = lista14; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_opt ::= 
            {
              ArrayList<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>();SourceGenerator.getInstance().resetarCache(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp_opt ::= exp_list 
            {
              ArrayList<Expression> RESULT =null;
		int e13left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e13right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expression> e13 = (ArrayList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e13; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primary ::= proccall 
            {
              Expression RESULT =null;
		int p12left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p12right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcCall p12 = (ProcCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  p12; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primary ::= variable 
            {
              Expression RESULT =null;
		int v12left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v12right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression v12 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (v12); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primary ::= literal 
            {
              Expression RESULT =null;
		int l12left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l12right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorLiteral l12 = (ValorLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =l12; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primary ::= OPAR expression CPAR 
            {
              Expression RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e12 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	RESULT =  e12; 
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fatorop ::= 
            {
              Operador RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fatorop",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fatorop ::= NOT 
            {
              Operador RESULT =null;
		int n11left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n11right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n11 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  Operador.NOT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fatorop",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fatorop ::= ADDOP 
            {
              Operador RESULT =null;
		int a11left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a11right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operador a11 = (Operador)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  a11; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fatorop",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= fatorop primary 
            {
              Expression RESULT =null;
		int f10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operador f10 = (Operador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p11left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p11right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression p11 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(f10==null){RESULT=p11; } else{ RESULT = new UnaryExpression(p11,f10);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= factor 
            {
              Expression RESULT =null;
		int f29left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f29right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression f29 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f29; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= term MULTOP factor 
            {
              Expression RESULT =null;
		int t19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression t19 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m19left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m19right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operador m19 = (Operador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f19left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f19right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression f19 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(t19,f19,m19); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aritexp ::= term 
            {
              Expression RESULT =null;
		int t29left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t29right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression t29 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t29;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritexp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aritexp ::= aritexp ADDOP term 
            {
              Expression RESULT =null;
		int t17left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t17right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression t17 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a18left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a18right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operador a18 = (Operador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t18left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t18right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression t18 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new BinaryExpression(t17,t18,a18); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritexp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relexp ::= aritexp 
            {
              Expression RESULT =null;
		int a27left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a27right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression a27 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a27; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relexp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relexp ::= aritexp RELOP aritexp 
            {
              Expression RESULT =null;
		int ar17left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ar17right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ar17 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a17left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a17right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operador a17 = (Operador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a217left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a217right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression a217 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new BinaryExpression(ar17,a217,a17); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relexp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // andexp ::= relexp 
            {
              Expression RESULT =null;
		int r26left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r26right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r26 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r26; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andexp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // andexp ::= andexp AND relexp 
            {
              Expression RESULT =null;
		int ae16left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ae16right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ae16 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r16left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r16right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r16 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new BinaryExpression(ae16,r16,Operador.AND); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andexp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= andexp 
            {
              Expression RESULT =null;
		int a25left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a25right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression a25 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a25; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= expression OR andexp 
            {
              Expression RESULT =null;
		int a5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression a5 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a15left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a15right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression a15 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new BinaryExpression(a5,a15,Operador.OR); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constdecl ::= 
            {
              ConstDecl RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constdecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constdecl ::= constdecl ID IGUAL expression PTVIRGULA 
            {
              ConstDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	RESULT = new ConstDecl (id, e);  
	TabelaSimbolo.insereInfo(new VarInfo(id, Literal.CONST, e)); 
	SourceGenerator.getInstance().resetarCache();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constdecl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constdecl_opt ::= 
            {
              ConstDecl RESULT =null;
		 RESULT = new ConstDecl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constdecl_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // constdecl_opt ::= CONST constdecl 
            {
              ConstDecl RESULT =null;
		int c78left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c78right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstDecl c78 = (ConstDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  c78; parser.escritor.escreve(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constdecl_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= constdecl_opt vardecl_opt procdecl_list 
            {
              Declarations RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstDecl c2 = (ConstDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDecl> v3 = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcDecl> p3 = (ArrayList<ProcDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declarations(c2,v3,p3); parser.escritor.escreve(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= MODULE cria_escopo ID PTVIRGULA declarations BEGIN statements END ID deleta_escopo 
            {
              Module RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Declarations d1 = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Statement> s1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String id1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	RESULT = new Module(d1,s1,id1 );
	System.out.println(RESULT); 
	System.err.println("Erro, faltou o '.' ao final do Arquivo. \n Linha: "+parser.lexico.getLeitor().getContLinha());
	
	if(!id.equals(id1)){
			System.err.println("Erro sintático, o nome do module deve ser o mesmo nome na finalizacao dele. END. Linha: "+LeitorArquivo.getContLinha()+", Coluna: "+LeitorArquivo.getContCol());
			
	}
	

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // module ::= MODULE cria_escopo ID PTVIRGULA declarations BEGIN statements END ID deleta_escopo PONTO 
            {
              Module RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Declarations d1 = (Declarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Statement> s1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String id1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	TabelaSimbolo.insereInfo(new ClassInfo(id1,null,null));
	RESULT = new Module(d1,s1,id1 );
	parser.raiz=RESULT; parser.escritor.fecharArquivo();
	
	if(!id.equals(id1)){
			System.err.println("Erro sintático, o nome do module deve ser o mesmo nome na finalizacao dele. END. Linha: "+LeitorArquivo.getContLinha()+", Coluna: "+LeitorArquivo.getContCol());
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Module start_val = (Module)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

